// <auto-generated />
using System;
using LivingSuburb.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LivingSuburb.Database.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LivingSuburb.Models.Carousel", b =>
                {
                    b.Property<int>("CarouselId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageURL");

                    b.Property<string>("Location");

                    b.Property<string>("Proverb");

                    b.Property<DateTime>("PublishedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getDate()");

                    b.Property<string>("Source");

                    b.HasKey("CarouselId");

                    b.ToTable("Carousels");
                });

            modelBuilder.Entity("LivingSuburb.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("CountryId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("LivingSuburb.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<DateTime>("DatePublished");

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("EventCategoryId");

                    b.Property<int>("EventTypeId");

                    b.Property<DateTime>("From");

                    b.Property<string>("Location");

                    b.Property<string>("ShortDescription")
                        .IsRequired();

                    b.Property<string>("SourceUrl")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<string>("TitleURL")
                        .IsRequired();

                    b.Property<DateTime>("To");

                    b.HasKey("EventId");

                    b.HasIndex("EventCategoryId");

                    b.HasIndex("EventTypeId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("LivingSuburb.Models.EventCategory", b =>
                {
                    b.Property<int>("EventCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("NameURL")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Rank")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("EventCategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("EventCategories");
                });

            modelBuilder.Entity("LivingSuburb.Models.EventTag", b =>
                {
                    b.Property<int>("EventId");

                    b.Property<int>("TagId");

                    b.HasKey("EventId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("EventTags");
                });

            modelBuilder.Entity("LivingSuburb.Models.EventType", b =>
                {
                    b.Property<int>("EventTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("NameURL")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Rank")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("EventTypeId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("EventTypes");
                });

            modelBuilder.Entity("LivingSuburb.Models.EventTypeCategory", b =>
                {
                    b.Property<int>("EventCategoryId");

                    b.Property<int>("EventTypeId");

                    b.HasKey("EventCategoryId", "EventTypeId");

                    b.ToTable("EventTypeCategories");
                });

            modelBuilder.Entity("LivingSuburb.Models.Forex", b =>
                {
                    b.Property<int>("ForexId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CAD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CNY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("EUR")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("GBP")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("IDR")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("JPY")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getDate()");

                    b.Property<decimal>("MYR")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NZD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SGD")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("USD")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ForexId");

                    b.ToTable("Forexs");
                });

            modelBuilder.Entity("LivingSuburb.Models.Gallery", b =>
                {
                    b.Property<int>("GalleryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Filename")
                        .IsRequired();

                    b.Property<string>("GUID")
                        .IsRequired();

                    b.Property<string>("Note");

                    b.Property<int>("State");

                    b.Property<string>("Suburb");

                    b.Property<string>("URL")
                        .IsRequired();

                    b.HasKey("GalleryId");

                    b.ToTable("Galleries");
                });

            modelBuilder.Entity("LivingSuburb.Models.Job", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApprovedDate");

                    b.Property<int>("Category");

                    b.Property<DateTime>("ClosingDate");

                    b.Property<string>("Code");

                    b.Property<string>("Company")
                        .IsRequired();

                    b.Property<string>("FullDescription")
                        .IsRequired();

                    b.Property<bool?>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime>("PublishedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getDate()");

                    b.Property<string>("ShortDescription")
                        .IsRequired();

                    b.Property<int>("State");

                    b.Property<int?>("SubCategory");

                    b.Property<int?>("Suburb");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<string>("TitleURL")
                        .IsRequired();

                    b.Property<string>("Url");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("JobId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("LivingSuburb.Models.JobCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("NameURL")
                        .IsRequired();

                    b.Property<int>("Rank")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("CategoryId");

                    b.ToTable("JobCategories");
                });

            modelBuilder.Entity("LivingSuburb.Models.JobSubCategory", b =>
                {
                    b.Property<int>("JobSubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("JobCategoryId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("NameURL")
                        .IsRequired();

                    b.Property<int>("Rank")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("JobSubCategoryId");

                    b.HasIndex("JobCategoryId");

                    b.ToTable("JobSubCategories");
                });

            modelBuilder.Entity("LivingSuburb.Models.JobTag", b =>
                {
                    b.Property<int>("JobId");

                    b.Property<int>("TagId");

                    b.HasKey("JobId", "TagId");

                    b.ToTable("JobTags");
                });

            modelBuilder.Entity("LivingSuburb.Models.News", b =>
                {
                    b.Property<int>("NewsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatePublished");

                    b.Property<DateTime>("LastUpdate");

                    b.Property<string>("NewsCategory");

                    b.Property<string>("NewsCountry");

                    b.Property<string>("NewsSource");

                    b.Property<string>("NewsTitle");

                    b.Property<string>("NewsURL");

                    b.HasKey("NewsId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("LivingSuburb.Models.OpenWeather", b =>
                {
                    b.Property<int>("OpenWeatherId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City");

                    b.Property<string>("IconTitle");

                    b.Property<string>("IconURL");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getDate()");

                    b.Property<decimal>("Temperature")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("WindSpeed")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OpenWeatherId");

                    b.ToTable("OpenWeathers");
                });

            modelBuilder.Entity("LivingSuburb.Models.OurMission", b =>
                {
                    b.Property<int>("OurMissionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Statement");

                    b.HasKey("OurMissionId");

                    b.ToTable("OurMissions");
                });

            modelBuilder.Entity("LivingSuburb.Models.PostCode", b =>
                {
                    b.Property<int>("Code");

                    b.Property<int>("SuburbId");

                    b.HasKey("Code", "SuburbId");

                    b.HasIndex("SuburbId");

                    b.ToTable("PostCodes");
                });

            modelBuilder.Entity("LivingSuburb.Models.PreciousMetal", b =>
                {
                    b.Property<int>("PreciousMetalId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Gold")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getDate()");

                    b.Property<decimal>("Palladium")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Platinum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Silver")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PreciousMetalId");

                    b.ToTable("PreciousMetals");
                });

            modelBuilder.Entity("LivingSuburb.Models.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LongName")
                        .IsRequired();

                    b.Property<string>("ShortName")
                        .IsRequired();

                    b.HasKey("StateId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("LivingSuburb.Models.Suburb", b =>
                {
                    b.Property<int>("SuburbId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Established")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("NameURL")
                        .IsRequired();

                    b.Property<int>("Population")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("StateId");

                    b.HasKey("SuburbId");

                    b.HasIndex("StateId");

                    b.ToTable("Suburbs");
                });

            modelBuilder.Entity("LivingSuburb.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("TagGroupId");

                    b.HasKey("TagId");

                    b.HasIndex("TagGroupId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("LivingSuburb.Models.TagGroup", b =>
                {
                    b.Property<int>("TagGroupId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("TagGroupId");

                    b.ToTable("TagGroups");
                });

            modelBuilder.Entity("LivingSuburb.Models.Temp", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreatedDate");

                    b.HasKey("Id");

                    b.ToTable("Temps");
                });

            modelBuilder.Entity("LivingSuburb.Models.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTime>("LastUpdate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Subject")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("LivingSuburb.Models.WeatherCoordinate", b =>
                {
                    b.Property<int>("LinkId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Label");

                    b.Property<string>("URL");

                    b.HasKey("LinkId");

                    b.ToTable("Links");
                });

            modelBuilder.Entity("LivingSuburb.Models.Event", b =>
                {
                    b.HasOne("LivingSuburb.Models.EventCategory", "EventCategory")
                        .WithMany("Events")
                        .HasForeignKey("EventCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LivingSuburb.Models.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LivingSuburb.Models.EventTag", b =>
                {
                    b.HasOne("LivingSuburb.Models.Event", "Event")
                        .WithMany("EventTags")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LivingSuburb.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LivingSuburb.Models.JobSubCategory", b =>
                {
                    b.HasOne("LivingSuburb.Models.JobCategory", "JobCategory")
                        .WithMany("JobSubCategories")
                        .HasForeignKey("JobCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LivingSuburb.Models.PostCode", b =>
                {
                    b.HasOne("LivingSuburb.Models.Suburb")
                        .WithMany("PostCodes")
                        .HasForeignKey("SuburbId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LivingSuburb.Models.Suburb", b =>
                {
                    b.HasOne("LivingSuburb.Models.State", "State")
                        .WithMany("Suburbs")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LivingSuburb.Models.Tag", b =>
                {
                    b.HasOne("LivingSuburb.Models.TagGroup", "TagGroup")
                        .WithMany("Tags")
                        .HasForeignKey("TagGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
